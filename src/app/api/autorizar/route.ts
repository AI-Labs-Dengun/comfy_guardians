import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('üìù Dados recebidos na API:', JSON.stringify(body, null, 2))
    
    const {
      childId,
      approvalToken,
      guardianName,
      guardianEmail,
      guardianAddress,
      guardianPostalCode,
      termsOfUse,
      gdprConsentDeclaration
    } = body

    // Valida√ß√£o dos dados recebidos
    if (!childId || !guardianName || !guardianEmail || !guardianAddress || !guardianPostalCode) {
      console.log('‚ùå Valida√ß√£o falhou - campos obrigat√≥rios:', { childId, guardianName, guardianEmail, guardianAddress, guardianPostalCode })
      return NextResponse.json(
        { error: 'Todos os campos s√£o obrigat√≥rios.' },
        { status: 400 }
      )
    }

    if (!termsOfUse || !gdprConsentDeclaration) {
      console.log('‚ùå Valida√ß√£o falhou - termos n√£o aceitos:', { termsOfUse, gdprConsentDeclaration })
      return NextResponse.json(
        { error: 'Deve aceitar os termos de uso e a declara√ß√£o de consentimento RGPD.' },
        { status: 400 }
      )
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(guardianEmail)) {
      console.log('‚ùå Email inv√°lido:', guardianEmail)
      return NextResponse.json(
        { error: 'Email inv√°lido.' },
        { status: 400 }
      )
    }

    console.log('üîç Buscando perfil da crian√ßa:', childId)
    // Verificar se a crian√ßa existe e n√£o est√° autorizada
    const { data: childProfile, error: childError } = await supabase
      .from('profiles')
      .select('id, name, username, guardian_email, authorized, approval_token')
      .eq('id', childId)
      .single()

    if (childError) {
      console.error('‚ùå Erro ao buscar perfil da crian√ßa:', childError)
      return NextResponse.json(
        { error: 'Crian√ßa n√£o encontrada.' },
        { status: 404 }
      )
    }

    if (!childProfile) {
      console.log('‚ùå Perfil da crian√ßa n√£o encontrado')
      return NextResponse.json(
        { error: 'Crian√ßa n√£o encontrada.' },
        { status: 404 }
      )
    }

    console.log('‚úÖ Perfil da crian√ßa encontrado:', { name: childProfile.name, authorized: childProfile.authorized })

    if (childProfile.authorized === true) {
      console.log('‚ùå Crian√ßa j√° autorizada')
      return NextResponse.json(
        { error: 'Esta crian√ßa j√° foi autorizada.' },
        { status: 409 }
      )
    }

    // Verificar se o email do respons√°vel corresponde
    if (childProfile.guardian_email !== guardianEmail) {
      console.log('‚ùå Email n√£o corresponde:', { 
        registered: childProfile.guardian_email, 
        provided: guardianEmail 
      })
      return NextResponse.json(
        { error: 'Email do respons√°vel n√£o corresponde ao registrado.' },
        { status: 403 }
      )
    }

    // Verificar se o token corresponde (se fornecido)
    if (approvalToken && childProfile.approval_token !== approvalToken) {
      console.log('‚ùå Token n√£o corresponde:', { 
        registered: childProfile.approval_token, 
        provided: approvalToken 
      })
      return NextResponse.json(
        { error: 'Token de autoriza√ß√£o inv√°lido.' },
        { status: 403 }
      )
    }

    console.log('üîç Verificando se j√° existe respons√°vel para este email:', guardianEmail)
    // A verifica√ß√£o de respons√°vel existente ser√° feita pela fun√ß√£o save_guardian_data

    console.log('üîß Chamando fun√ß√£o authorize_account...')
    // Usar a fun√ß√£o nativa do Supabase para autorizar a conta
    const { data: authResult, error: authError } = await supabase
      .rpc('authorize_account', {
        approval_token_param: childProfile.approval_token,
        guardian_email_param: guardianEmail,
        guardian_ip: request.headers.get('x-forwarded-for') || null,
        guardian_user_agent: request.headers.get('user-agent') || null
      })

    if (authError) {
      console.error('‚ùå Erro ao autorizar conta:', authError)
      return NextResponse.json(
        { error: authError.message || 'Erro ao autorizar conta.' },
        { status: 500 }
      )
    }

    if (!authResult?.success) {
      console.error('‚ùå Autoriza√ß√£o falhou:', authResult)
      return NextResponse.json(
        { error: authResult?.error || 'Erro ao autorizar conta.' },
        { status: 500 }
      )
    }

    console.log('‚úÖ Conta autorizada com sucesso, salvando dados do respons√°vel...')

    // Salvar dados do respons√°vel usando a fun√ß√£o RPC
    console.log('üîß Salvando dados do respons√°vel via fun√ß√£o RPC...')
    const { data: guardianResult, error: guardianError } = await supabase
      .rpc('save_guardian_data', {
        p_child_name: childProfile.name,
        p_guardian_name: guardianName,
        p_guardian_email: guardianEmail,
        p_guardian_address: guardianAddress,
        p_guardian_postal_code: guardianPostalCode,
        p_terms_of_use: termsOfUse,
        p_gdpr_consent: gdprConsentDeclaration
      })

    if (guardianError) {
      console.error('‚ùå Erro ao salvar dados do respons√°vel:', guardianError)
      console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel salvar dados adicionais do respons√°vel, mas a autoriza√ß√£o foi processada com sucesso')
      
      // Tentar inser√ß√£o direta como fallback
      console.log('üîß Tentando inser√ß√£o direta como fallback...')
      try {
        const guardianData = {
          child_name: childProfile.name,
          guardian_name: guardianName,
          guardian_email: guardianEmail,
          guardian_address: guardianAddress,
          guardian_postal_code: guardianPostalCode,
          terms_of_use: termsOfUse,
          gdpr_consent_declaration: gdprConsentDeclaration
        }

        const { data: insertResult, error: insertError } = await supabase
          .from('children_guardians')
          .insert(guardianData)
          .select()

        if (insertError) {
          console.error('‚ùå Erro na inser√ß√£o direta:', insertError)
          console.warn('‚ö†Ô∏è Inser√ß√£o direta tamb√©m falhou, mas a autoriza√ß√£o principal foi bem-sucedida')
        } else {
          console.log('‚úÖ Dados salvos via inser√ß√£o direta:', insertResult)
        }
      } catch (insertException) {
        console.error('‚ùå Exce√ß√£o na inser√ß√£o direta:', insertException)
        console.warn('‚ö†Ô∏è Inser√ß√£o direta falhou, mas a autoriza√ß√£o principal foi bem-sucedida')
      }
    } else {
      console.log('‚úÖ Dados do respons√°vel salvos com sucesso:', guardianResult)
    }

    return NextResponse.json(
      { 
        success: true, 
        message: 'Autoriza√ß√£o processada com sucesso.',
        childName: childProfile.name,
        username: childProfile.username
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('‚ùå Erro geral na API de autoriza√ß√£o:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor.' },
      { status: 500 }
    )
  }
} 