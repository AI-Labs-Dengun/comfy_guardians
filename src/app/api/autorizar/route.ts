import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('üìù Dados recebidos na API:', JSON.stringify(body, null, 2))
    
    const {
      childId,
      approvalToken,
      guardianName,
      guardianEmail,
      guardianAddress,
      guardianPostalCode,
      termsOfUse,
      gdprConsentDeclaration
    } = body

    // Valida√ß√£o dos dados recebidos
    if (!childId || !guardianName || !guardianEmail || !guardianAddress || !guardianPostalCode) {
      console.log('‚ùå Valida√ß√£o falhou - campos obrigat√≥rios:', { childId, guardianName, guardianEmail, guardianAddress, guardianPostalCode })
      return NextResponse.json(
        { error: 'Todos os campos s√£o obrigat√≥rios.' },
        { status: 400 }
      )
    }

    if (!termsOfUse || !gdprConsentDeclaration) {
      console.log('‚ùå Valida√ß√£o falhou - termos n√£o aceitos:', { termsOfUse, gdprConsentDeclaration })
      return NextResponse.json(
        { error: 'Deve aceitar os termos de uso e a declara√ß√£o de consentimento RGPD.' },
        { status: 400 }
      )
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(guardianEmail)) {
      console.log('‚ùå Email inv√°lido:', guardianEmail)
      return NextResponse.json(
        { error: 'Email inv√°lido.' },
        { status: 400 }
      )
    }

    console.log('üîç Buscando perfil da crian√ßa:', childId)
    // Verificar se a crian√ßa existe e n√£o est√° autorizada
    const { data: childProfile, error: childError } = await supabase
      .from('profiles')
      .select('id, name, username, guardian_email, authorized, approval_token')
      .eq('id', childId)
      .single()

    if (childError) {
      console.error('‚ùå Erro ao buscar perfil da crian√ßa:', childError)
      return NextResponse.json(
        { error: 'Crian√ßa n√£o encontrada.' },
        { status: 404 }
      )
    }

    if (!childProfile) {
      console.log('‚ùå Perfil da crian√ßa n√£o encontrado')
      return NextResponse.json(
        { error: 'Crian√ßa n√£o encontrada.' },
        { status: 404 }
      )
    }

    console.log('‚úÖ Perfil da crian√ßa encontrado:', { name: childProfile.name, authorized: childProfile.authorized })

    if (childProfile.authorized === true) {
      console.log('‚ùå Crian√ßa j√° autorizada')
      return NextResponse.json(
        { error: 'Esta crian√ßa j√° foi autorizada.' },
        { status: 409 }
      )
    }

    // Verificar se o email do respons√°vel corresponde
    if (childProfile.guardian_email !== guardianEmail) {
      console.log('‚ùå Email n√£o corresponde:', { 
        registered: childProfile.guardian_email, 
        provided: guardianEmail 
      })
      return NextResponse.json(
        { error: 'Email do respons√°vel n√£o corresponde ao registrado.' },
        { status: 403 }
      )
    }

    // Verificar se o token corresponde (se fornecido)
    if (approvalToken && childProfile.approval_token !== approvalToken) {
      console.log('‚ùå Token n√£o corresponde:', { 
        registered: childProfile.approval_token, 
        provided: approvalToken 
      })
      return NextResponse.json(
        { error: 'Token de autoriza√ß√£o inv√°lido.' },
        { status: 403 }
      )
    }

    console.log('üîç Verificando se j√° existe respons√°vel para este email:', guardianEmail)
    // Verificar se j√° existe um registro de respons√°vel para este email
    const { data: existingGuardian, error: existingError } = await supabase
      .from('children_guardians')
      .select('id')
      .eq('guardian_email', guardianEmail)
      .single()

    if (existingError && existingError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar respons√°vel existente:', existingError)
    }

    if (existingGuardian) {
      console.log('‚ùå J√° existe respons√°vel para este email')
      return NextResponse.json(
        { error: 'J√° existe um registro para este respons√°vel.' },
        { status: 409 }
      )
    }

    console.log('üîß Chamando fun√ß√£o authorize_account...')
    // Usar a fun√ß√£o nativa do Supabase para autorizar a conta
    const { data: authResult, error: authError } = await supabase
      .rpc('authorize_account', {
        approval_token_param: childProfile.approval_token,
        guardian_email_param: guardianEmail,
        guardian_ip: request.headers.get('x-forwarded-for') || null,
        guardian_user_agent: request.headers.get('user-agent') || null
      })

    if (authError) {
      console.error('‚ùå Erro ao autorizar conta:', authError)
      return NextResponse.json(
        { error: authError.message || 'Erro ao autorizar conta.' },
        { status: 500 }
      )
    }

    if (!authResult?.success) {
      console.error('‚ùå Autoriza√ß√£o falhou:', authResult)
      return NextResponse.json(
        { error: authResult?.error || 'Erro ao autorizar conta.' },
        { status: 500 }
      )
    }

    console.log('‚úÖ Conta autorizada com sucesso, salvando dados do respons√°vel...')

    // Dados para inser√ß√£o na tabela children_guardians
    const guardianData = {
      child_name: childProfile.name,
      child_birth_date: new Date().toISOString().split('T')[0], // Data atual como fallback
      guardian_name: guardianName,
      guardian_email: guardianEmail,
      guardian_address: guardianAddress,
      guardian_postal_code: guardianPostalCode,
      terms_of_use: termsOfUse,
      gdpr_consent_declaration: gdprConsentDeclaration,
      account_creation_authorization_date: new Date().toISOString()
    }

    console.log('üìù Dados do respons√°vel para inser√ß√£o:', JSON.stringify(guardianData, null, 2))

    // Verificar se a tabela children_guardians existe e tem a estrutura correta
    console.log('üîç Verificando estrutura da tabela children_guardians...')
    try {
      const { data: tableInfo, error: tableError } = await supabase
        .from('children_guardians')
        .select('*')
        .limit(1)

      if (tableError) {
        console.error('‚ùå Erro ao verificar tabela children_guardians:', tableError)
        console.warn('‚ö†Ô∏è Pulando inser√ß√£o na tabela children_guardians - tabela n√£o acess√≠vel')
      } else {
        console.log('‚úÖ Tabela children_guardians acess√≠vel')
      }
    } catch (tableCheckException) {
      console.error('‚ùå Exce√ß√£o ao verificar tabela:', tableCheckException)
      console.warn('‚ö†Ô∏è Pulando inser√ß√£o na tabela children_guardians - erro na verifica√ß√£o')
    }

    // Tentar inserir dados do respons√°vel na tabela children_guardians
    let insertResult = null
    let guardianError = null

    try {
      console.log('üîß Tentando inser√ß√£o na tabela children_guardians...')
      const { data, error } = await supabase
        .from('children_guardians')
        .insert(guardianData)
        .select()

      insertResult = data
      guardianError = error
      
      if (guardianError) {
        console.error('‚ùå Erro na inser√ß√£o:', guardianError)
        console.error('‚ùå C√≥digo do erro:', guardianError.code)
        console.error('‚ùå Mensagem do erro:', guardianError.message)
        console.error('‚ùå Detalhes do erro:', guardianError.details)
        console.error('‚ùå Dica do erro:', guardianError.hint)
      } else {
        console.log('‚úÖ Inser√ß√£o bem-sucedida:', insertResult)
      }
    } catch (insertException) {
      console.error('‚ùå Exce√ß√£o ao inserir dados do respons√°vel:', insertException)
      guardianError = {
        code: 'INSERT_EXCEPTION',
        message: insertException instanceof Error ? insertException.message : 'Erro desconhecido na inser√ß√£o',
        details: null,
        hint: null
      }
    }

    // Por enquanto, n√£o vamos falhar se a inser√ß√£o na tabela children_guardians falhar
    // A autoriza√ß√£o principal j√° foi feita com sucesso
    if (guardianError) {
      console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel salvar dados adicionais do respons√°vel, mas a autoriza√ß√£o foi processada com sucesso')
      console.warn('‚ö†Ô∏è Dados que n√£o foram salvos:', guardianData)
      
      // Tentar uma abordagem alternativa usando RPC
      console.log('üîß Tentando abordagem alternativa via RPC...')
      try {
        const { data: rpcResult, error: rpcError } = await supabase
          .rpc('save_guardian_data', {
            p_child_name: childProfile.name,
            p_guardian_name: guardianName,
            p_guardian_email: guardianEmail,
            p_guardian_address: guardianAddress,
            p_guardian_postal_code: guardianPostalCode,
            p_terms_of_use: termsOfUse,
            p_gdpr_consent: gdprConsentDeclaration
          })
        
        if (rpcError) {
          console.error('‚ùå Erro na fun√ß√£o RPC:', rpcError)
          console.warn('‚ö†Ô∏è Fun√ß√£o RPC tamb√©m falhou, mas a autoriza√ß√£o principal foi bem-sucedida')
        } else {
          console.log('‚úÖ Dados salvos via RPC:', rpcResult)
        }
      } catch (rpcException) {
        console.error('‚ùå Exce√ß√£o na fun√ß√£o RPC:', rpcException)
        console.warn('‚ö†Ô∏è Fun√ß√£o RPC falhou, mas a autoriza√ß√£o principal foi bem-sucedida')
      }
      
      // Retornar sucesso mesmo com erro na inser√ß√£o da tabela children_guardians
      // pois a autoriza√ß√£o principal foi bem-sucedida
    } else {
      console.log('‚úÖ Dados do respons√°vel salvos com sucesso:', insertResult)
    }

    return NextResponse.json(
      { 
        success: true, 
        message: 'Autoriza√ß√£o processada com sucesso.',
        childName: childProfile.name,
        username: childProfile.username
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('‚ùå Erro geral na API de autoriza√ß√£o:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor.' },
      { status: 500 }
    )
  }
} 